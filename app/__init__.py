# from flask import Flask
# import logging
# import sys

# # Set up logging
# logging.basicConfig(
#     level=logging.DEBUG,
#     format='%(asctime)s - %(levelname)s - %(message)s',
#     handlers=[
#         logging.StreamHandler(sys.stdout)
#     ]
# )
# logger = logging.getLogger(__name__)

# # Initialize Flask app
# app = Flask(__name__, template_folder='../templates', static_folder='../static')

# # Log app initialization
# logger.info("Flask app initialized")

# # Import routes after app initialization to avoid circular imports
# from . import routes

# your_flask_app_module/__init__.py

import os
import sys
import logging
from flask import Flask, send_from_directory, jsonify, current_app # Import necessary functions

# --- Logging Setup (keep as is) ---
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# --- Determine Paths for React Build Output ---

# Get the directory where this __init__.py file resides
BASE_DIR = os.path.abspath(os.path.dirname(__file__))

# Construct paths relative to this file's directory
# Assumes 'frontend/dist' is one level up from the directory containing __init__.py
# Adjust ../ if your structure is different (e.g., if __init__.py is at the project root, remove ../)
REACT_DIST_FOLDER = os.path.join(BASE_DIR, '..', 'frontend', 'dist')
REACT_STATIC_FOLDER = os.path.join(REACT_DIST_FOLDER, 'assets') # Vite typically puts assets here

logger.info(f"Attempting to use React build folder: {REACT_DIST_FOLDER}")
logger.info(f"Attempting to use React static assets folder: {REACT_STATIC_FOLDER}")

# --- Initialize Flask App to Serve React ---
app = Flask(__name__,
            static_folder=REACT_STATIC_FOLDER, # Serve static files (JS, CSS) from 'dist/assets'
            template_folder=REACT_DIST_FOLDER, # Serve index.html from 'dist'
            static_url_path='/assets'          # URL path for static assets must match Vite's output
           )

# Log app initialization with new config
logger.info(f"Flask app initialized. Serving React frontend.")
logger.info(f"Static Folder: {app.static_folder}")
logger.info(f"Template Folder: {app.template_folder}")


# --- API Routes (Imported After App Initialization) ---
# Important: Your API routes MUST be defined before the catch-all route below.
from . import routes
logger.info("API routes imported")


# --- Static File Serving for React Assets ---
@app.route('/assets/<path:filename>')
def serve_react_static_files(filename):
    """Serves static files generated by the React build (JS, CSS, images)."""
    if not os.path.exists(current_app.static_folder):
         logger.error(f"React static assets folder not found at: {current_app.static_folder}")
         return jsonify({"error": "Static assets folder not found"}), 500
    # Use send_from_directory for security
    logger.debug(f"Serving static asset: {filename} from {current_app.static_folder}")
    return send_from_directory(current_app.static_folder, filename)


# --- Catch-All Route to Serve React App ---
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve_react_app(path):
    """
    Serves the main index.html for the React app, enabling client-side routing.
    Handles all routes NOT explicitly defined as API routes or static asset routes.
    """
    # Check if the requested path looks like an API endpoint to avoid accidentally
    # serving the index.html for a non-existent API call.
    # Add ALL your known API route prefixes here.
    known_api_prefixes = (
        '/video_feed',
        '/detections',
        '/update_prompts',
        '/clear_prompts',
        '/toggle_pause', # Added from React example
        '/process_visual_prompt',
        '/clear_visual_prompts',
        '/visual_prompt_data', # Added from React example
        '/set_text_classes', # Map to the correct API endpoint name
        # Add any other API endpoints served by Flask
    )
    # Check if the request path starts with any of the known API prefixes
    is_api_call = any(request.path.startswith(prefix) for prefix in known_api_prefixes) # Use request.path

    if is_api_call:
        # If the request path matches an API prefix but wasn't handled
        # by a specific API route decorator earlier (in routes.py),
        # then it's likely a 404 for the API.
        logger.warning(f"Request path '{request.path}' looks like API but wasn't handled by specific route.")
        return jsonify({"error": "API endpoint not found"}), 404

    # If it's not an API call, serve the React app's entry point.
    index_path = os.path.join(current_app.template_folder, 'index.html')
    if not os.path.exists(index_path):
        logger.error(f"React index.html not found at: {index_path}")
        return jsonify({"error": "React application entry point not found. Did you run 'npm run build'?"}), 500

    logger.debug(f"Serving React index.html for path: '{path}' from {current_app.template_folder}")
    return send_from_directory(current_app.template_folder, 'index.html')

# Add a check for paths during startup (optional but helpful)
with app.app_context():
     if not os.path.exists(app.static_folder):
         logger.warning(f"Configured React static assets folder does not exist: {app.static_folder}")
         logger.warning("Ensure the React app is built ('npm run build' in 'frontend/') and the path is correct.")
     if not os.path.exists(os.path.join(app.template_folder, 'index.html')):
          logger.warning(f"React index.html not found in configured template folder: {app.template_folder}")
          logger.warning("Ensure the React app is built ('npm run build' in 'frontend/') and the path is correct.")